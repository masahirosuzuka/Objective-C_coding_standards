Objective-Cコーディング規約
  本規約はGoogleのObjective-Cコーディング規約とAppleのCocoaコーディングガイドラインを原
型としています．

本文書はCC3.0を継承します．

//
//  XYZFoo.h
//  MyCodingStandard
//
//  Created by Greg Miller on 6/13/08.
//  Kaizen by Masahiro Suzuka on 2014/01/08.
//  Copyright (c) 2014年 Masahiro Suzuka. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface XYZFoo : NSObject

@property NSString *foo;
@property NSString *bar;

// Returns instance of Foo
+ (id)fooWithString:(NSString *)string;

// Initializer
- (id)initWithString:(NSString *)string;

// Do something with string
- (BOOL)doWorkWithString:(NSString *)blah;

@end

//
//  XYZFoo.m
//  MyCodingStandard
//
//  Created by Greg Miller on 6/13/08.
//  Kaizen by Masahiro Suzuka on 2014/01/08.
//  Copyright (c) 2014年 Masahiro Suzuka. All rights reserved.
//

#import "XYZFoo.h"

@implementation XYZFoo

@synthesize foo = _foo;
@synthesize bar = _bar;

+ (id)fooWithString:(NSString *)string
{
  return [[self alloc] initWithString:string];
  // If you not use ARC uncomment
  /*
  return [[[self alloc] initWithString:string] autorelease];
  */
}

- (id) initWithString:(NSString *)string
{
  if (self = [super init]) {
    _foo = [string copy];
    _bar = [[NSString alloc] initWithFormat:@"hi %d", 3];
  }
  return self;
}

- (BOOL)doWorkWithString:(NSString *)blah
{
  return NO;
}

// If you not use ARC uncomment
/*
- (void) dealloc
{
  [_foo release];
  [_bar release];
}
*/

@end


////////////////////////////////////////////////////////////////////////////////
空白と書式

・スペースだけを使い，タブは使わないでください．インデントはスペース2つ分にします．コーディン
グ環境でタブをスペースに変換を設定しておくと便利です．

・テキスト一行の長さは80文字以内にしてください．

・メソッド宣言において+や-や戻り値の前にはスペースを入れてください．＊の前にはスペースを入れ
てください．メソッドはK&Rスタイルにしてください．
例
- (void)foobar:(Hoge *)hoge
{
  if (hoge == nil) {
    //処理
  }
}

・パラメータが複数行に渡る時はコロンで整列させてください．

・if (foo)のようにキーワードの前にスペースを入れてください．bar();のように関数呼び出しの前
にはスペースを入れないでください．これによってキーワードと関数の呼び出しが一目で識別出来るよ
うになります．

・著作権表示とソースコードが作られた日付を必ず付けてください．外部に提供する場合はライセンス
表示を付けてください．

・メソッドの宣言の順番と実装の順番は一致するようにしてください．

////////////////////////////////////////////////////////////////////////////////
命名規則

・クラス名，変数名，ファイル名などにはイニシャリズムを使っても構いません．URL，EXITなど．

・ファイル名は以下のようにしてください．
　.h   ヘッダファイル
　.m   Objective-Cの実装ファイル
　.mm  Objective-C++のファイル
　.cc  C++の実装ファイル
　.c   Cの実装ファイル

・クラス名は大文字で始めて大文字と小文字を組み合わせ，単語を大文字で区切った形にしてください．
例
MyClass{

}

・メソッド名は小文字で始めて以降は大文字で単語を区切るようにしてください．
例
- (void)myMethod
{

}

・変数名は小文字で始めて以降は大文字で単語を区切るようにしてください．

////////////////////////////////////////////////////////////////////////////////
コメント

・コメントは英語で書いてください．

・全てのメソッドにコメントを書いてください．

////////////////////////////////////////////////////////////////////////////////
Objective-CとCocoaの機能

・ヘッダファイルは
  1.クラスのヘッダファイル
  2.フレームワークのヘッダファイル
  3.標準ライブラリのヘッダファイル
  4.サードパーティ製ライブラリのヘッダファイル
  5.プロジェクトの関連するファイル
  の順にimportしてください．できるかぎりincludeを使わず，importを使ってください．

・インスタンス変数は宣言せず，@propertyと@synchronizeによるインスタンス変数合成機能を利用
してください．

・変数へのアクセスはinit（イニシャライザ）とdealloc以外ではsetter，getterメソッドを使って
ください．
  self.hoge;

・一時変数は原則初期化メソッドと同じ行でautoreleaseしてください．ARCを使っている場合autore
leaseしないでください．

・クラスを定義した場合は必ず指定イニシャライザを定義してください．どれが指定イニシャライザか
コメントで分かるようにしてください．

・クラスを定義した場合は必ずスーパークラスの指定イニシャライザを上書きし，スーパークラスのイ
ニシャライザを呼び出してください．

・イニシャライザの中でnilや0で初期化しないでください．これは冗長です．

・クラスメソッドは機能別にまとめ，"#pragma mark"を使ってまとめてください．

////////////////////////////////////////////////////////////////////////////////
Cocoaパターン

・Delegateパターンを活用してください．

・MVCパターンを活用してください．
